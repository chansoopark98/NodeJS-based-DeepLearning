<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body {
            text-align: center;
            margin: 0;
            padding: 0;
        }
        video {
            background-color: black;
            z-index: -1;
            width: 100%;
            height: auto;
        }
        #guideline {
            background-color: rgba(0, 0, 0, 0);
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
            width: 100%;
            height: auto;
        }
        #canvas {
            background-color: rgba(127, 127, 127, 0.5);
            position: absolute;
            top: 0;
            left: 0;
            z-index: 2;
            width: 100%;
            height: auto;
        }
        #draw_canvas {
            background-color: rgba(127, 127, 127, 0.5);
            top: 0;
            left: 0;
            z-index: 2;
            height: auto;
        }
        button, div{
            font-size: 5rem;
        }
        button {
            margin-right: 2rem;
        }
        form {
            display: inline;
        }
    </style>
    <title>Test</title>
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
</head>

<script type="text/javascript" src="https://livejs.com/live.js"></script>

<body onload="onLoad()">
    <video id="video" autoplay muted></video>
    <canvas id="guideline"></canvas>
    <canvas id="canvas"></canvas>
    <canvas id="draw_canvas"></canvas>
    <input type="hidden" name="result_data" value="" id="js_data_input">
</body>

<script>
    
    console.log('inint');
    var webSocket = new WebSocket("wss://park-tdl.tspxr.ml:7777");
    
    // var webSocket = new WebSocket("ws://127.0.0.1:7777");
        
    console.log('ws');
    var client_id = Math.random().toString(36).substr(2,11);
    client_id += ',';

    // 카메라 세팅 부분
    let front_camera = false    // 전면 카메라 사용 유무
    let width = 640;     // 해상도 (너비)
    let height = 480;    // 해상도 (높이)
    let camera_resolution = [width, height];     // 해상도
    const fps = 30;      //FPS
    const capture_time = 1000;  // 캡쳐 시간
    const canvas = document.getElementById('canvas');
    const draw_canvas = document.getElementById('draw_canvas');
    draw_canvas.width = 224;
    draw_canvas.height = 224;
    let context = canvas.getContext('2d')
    let draw_context = draw_canvas.getContext('2d');
    var draw_dummy_image = new Image(224, 224);
    let image_src;
    const videoElement = document.querySelector('video');
    videoElement.addEventListener('canplaythrough', render_video);
    

    webSocket.interval = setInterval(() => { // ?초마다 클라이언트로 메시지 전송
      if (webSocket.readyState === webSocket.OPEN) {

        webSocket.send(client_id + canvas.toDataURL('image/jpeg'), 0.3);
        draw_context.drawImage(draw_dummy_image, 0, 0);
      }
    }, 100);


    webSocket.onmessage = function(message){
        draw_dummy_image.src = message.data;      

        
    };


         
    
    // 페이지를 로드하면 실행 (구성요소들 초기화)
    function onLoad() {
        if (navigator.platform.indexOf('arm') !== -1 || navigator.platform.indexOf('aarch') !== -1) {
            [width, height] = [height, width]
        }
        video.width = width;
        video.height = height;
        canvas.width = width;
        canvas.height = height;
        canvas.style.visibility = 'visible';
        draw_canvas.style.visibility = 'visible'; //hidden

        stream();
        video.style.visibility = 'hidden';
    }

    // 웹에서 카메라 사용을 위한 스트림 생성
    function stream() {
        // navigator.getUserMedia(
        //     {video: {facingMode: (front_camera ? "user" : "environment"),
        //             width: camera_resolution[0],
        //             height: camera_resolution[1]}, audio: false},
        //     function (stream){video.srcObject = stream; video.play()},
        //     function (err){alert(err)}
        // )
        
        
        let constraints = {
            audio: false,
            video: video
        };
    
        
        navigator.mediaDevices.getUserMedia(constraints).then(stream => {
            stream.getVideoTracks().forEach(track => {
                //console.log(track);
                console.log(track.getSettings());
            });
            
            video.srcObject = stream;
            video.addEventListener("loadedmetadata", () => {
                video.play();
                reserve(true, stream);
            });
        }).catch("Open camera failed!");
    }

    async function render_video(){
         context.drawImage(videoElement, 0, 0);
         await requestAnimationFrame(render_video)
    }

</script>
</html>